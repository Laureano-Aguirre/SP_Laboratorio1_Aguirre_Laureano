#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Aguirre.h"
#include "parser.h"
#include "Libros.h"
#include "Controller.h"
#include "LinkedList.h"

int controller_loadFromText(char* path , LinkedList* pArrayListLibro)
{
	int retorno=0;
	FILE *auxP;

	auxP=fopen(path ,"r");
	perror(path);
	if(auxP!=NULL)
	{
		if(parser_LibroFromText(auxP, pArrayListLibro)==1)
		{
			retorno=1;
			puts("\nDatos cargados correctamente.");
		}
	}
	else
	{
		puts("\nError, no se puede leer el archivo.");
	}
	fclose(auxP);
    return retorno;
}

int controller_ListLibro(LinkedList* pArrayListLibro)
{
	int i;
	int retorno=-1;

	if(pArrayListLibro!=NULL)
	{
		if(ll_len(pArrayListLibro)>0)
		{
			for(i=0;i<ll_len(pArrayListLibro);i++)
			{
				mostrarLibro(pArrayListLibro, i);
				retorno=1;
			}
		}
		else
		{
			puts("\nNo hay libros disponibles para listar.");
		}

	}
    return retorno;
}

int controller_sortLibro(LinkedList* pArrayListLibro)
{
	int retorno=-1;
	int opcion;

	if(pArrayListLibro!=NULL)
	{
		if(ll_len(pArrayListLibro)>0)
		{
			getInt("\nIngrese que desea ordenar (1.autor 2.titulo 3.precio 4.ID editorial): ", &opcion);
			while(opcion!=1 && opcion !=2 && opcion!=3 && opcion!=4)
			{
				getInt("\nError, ingrese que desea ordenar (1.nombre 2.sueldo 3.horas trabajadas, entero): ", &opcion);
			}
			switch(opcion)
			{
				case 1:
					if(ll_sort(pArrayListLibro, OrdenamientoPorNombre, 1)==0)	//le paso a la funcion sort, encargada de hacer el swapeo, la lista, la funcion retornando
					{
						retorno=1;
					}
					break;													//el valor de la comparacion, y el tipo de ordenamiento (1 descendente)
				case 2:
					if(ll_sort(pArrayListLibro, OrdenamientoPorSueldo, 1)==0)
					{
						retorno=1;
					}
					break;
				case 3:
					if(ll_sort(pArrayListLibro, OrdenamientoPorHsTrabajadas, 1)==0)
					{
						retorno=1;
					}
					break;
			}
		}
		else
		{
			puts("\nNo hay empleados disponibles para ordenar.");
		}
	}
	else
	{
		puts("\nError, no hay nada cargado en la lista.");
	}
    return retorno;
}

void mostrarEmpleado(eLibro* pArrayListLibro, int index)
{
	eLibro* libro;
	int id;
	int precio;
	int editorialId;
	char autor[50];
	char titulo[50];

	libro=(eLibro*)ll_get(pArrayListLibro, index);
	libro_getHorasTrabajadas(libro, &horasTrabajadas);
	libro_getSueldo(libro, &sueldo);
	libro_getNombre(libro, nombre);
	libro_getId(libro, &id);

	printf("\nID: %d  ----  nombre: %s  ----  sueldo: %d  ----  horas trabajadas: %d", id, nombre, sueldo, horasTrabajadas);

}

int OrdenamientoPorNombre(void* empleadoA, void* empleadoB)
{
	int retorno=0;

	retorno=strcmp(((Employee*)empleadoA)->nombre, ((Employee*)empleadoB)->nombre);		//declaro y casteo las variables de tipo empleado, luego las comparo

	return retorno;
}
int OrdenamientoPorHsTrabajadas(void* empleadoA, void* empleadoB)
{
	int retorno=0;

	if(((Employee*)empleadoA)->horasTrabajadas > ((Employee*)empleadoB)->horasTrabajadas) //compara si el empleado A tiene mas horas trabajadas que el empleado B
	{
		retorno=1;
	}
	else if(((Employee*)empleadoA)->horasTrabajadas < ((Employee*)empleadoB)->horasTrabajadas)	///compara si el empleado B tiene mas horas trabajadas que el empleado A
	{
		retorno=-1;
	}
	else
	{
		retorno=0;		//ambos empleados trabajaron las mismas horas
	}
	return retorno;
}

int OrdenamientoPorSueldo(void* empleadoA, void* empleadoB)
{
	int retorno=0;

	if(((Employee*)empleadoA)->sueldo > ((Employee*)empleadoB)->sueldo)		//compara el sueldo del empleado A con el sueldo del empleado B, si gana mas, retorna 1
	{
		retorno=1;
	}
	else if(((Employee*)empleadoA)->sueldo < ((Employee*)empleadoB)->sueldo)		//compara el sueldo del empleado B con el del empleado A, si gana mas, retorna -1
	{
		retorno=-1;
	}
	else
	{
		retorno=0;		//retorna 0 en caso de que ganen lo mismo
	}
	return retorno;
}
